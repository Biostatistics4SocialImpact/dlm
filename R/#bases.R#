
## basis function extensions should be of class "SmoothLag"


#' @title Basis vector sets
#'
#' @description
#' 

basis <- function(x, center = TRUE, scale = FALSE, ...,
                  .fun = function(x, ...) abs(outer(x, x, "-"))^3
                  ) {
  ## scale and center lag, if desired
  cntr <- 0
  scl <- 1
  if (center && is.logical(center))
    cntr <- mean(x)
  else if (center)
    cntr <- center

  if (scale && is.logical(scale))
    scl <- sd(x)
  else if (scale)
    scl <- scale
  cx <- c(x - cntr) / scl

  ## compute basis vectors
  ## decompose the basis vector set to control degrees of
  ## freedom in the downstream model. This bit follows
  ## CITATION
  C0 <- cbind(1, cx)
  colnames (C0) <- x[1:NCOL(C0)]
  C1 <- .fun(cx, ...)
  M1 <- qr.Q(qr(cbind(C0, C1)))[, -(1:2)]
  S <- svd(t(M1) %*% C1 %*% M1)
  M2.inv.sqrt <- S$v %*% diag(1 / sqrt(S$d)) %*% t(S$u)
  K1 <- C1 %*% M1 %*% M2.inv.sqrt
  colnames (K1) <- x[-(1:NCOL(C0))]
  ## if numerical issues come to the fore at some point,
  ## may consider norming the C0, K1 matrices
  LagBasis(x = x, x.center = cntr, x.scale = scl,
           C0 = C0, K1 = K1
           )
}





#' @title Cubic Radial Basis
#'
#' @description
#' Construct a natural cubic radial basis set for a given
#' lag vector and apply as a linear transformation of a
#' concentration matrix.
#'
#' @param x
#'   a vector of values to construct the basis from. Missing values
#'   are not allowed.
#'
#' @param Z
#'   a covariate matrix (or object that can be coerced to a \code{matrix})
#'   to apply the linear basis transformation to.
#'   \code{length(x)} should be the same as \code{ncol(Z)}.
#'
#' @param ...
#'   arguments to be passed to \code{\link{basis}}
#'
#' @details
#'   \code{cr} is little more than a convenient
#'   wrapper to the function \code{\link{basis}} and the
#'   \code{\link{SmoothBasis}} class constructor. It is intended to
#'   simplify the task of specifying lag terms in a model \code{formula}.
#'   The function computes a set of natural cubic basis vectors for
#'   parameter \code{x} and applies this basis as a linear transformation
#'   of the covariate/concentration matrix parameter, \code{Z}. For example,
#'   if \code{Z} is the identity matrix, the model fit will simply be
#'   the natural cubic spline of \code{x}.
#'
#'   Note that other basis extensions should always return an object
#'   that inherits from \code{\link{SmoothBasis}}
#'
#' @seealso \code{\link{basis}}, \code{\link{SmoothBasis}}
#'
#' @return
#' An S4 object of class \code{\link{SmoothBasis}}.
#'
#' @examples
#' ## load simulated data and extract concentration matrix
#' data (simdata)
#' Conc <- simdata[, -(1:3)]  # First columns are Y, Age, and Gender
#'
#' ## radial lag (distance) each concentration was measured at
#' x <- seq(0.1, 10, length.out = ncol(Conc))
#' crb <- cr(x, Conc)
#'

cr <- function(x, Z, ..., .fun = NULL) {
  if (any(is.na(x)) || any(is.na(Z)))
    stop ("missing values not allowed")
  if (is.data.frame(Z))  Z <- as.matrix(Z)
  if (length(x) != NCOL(Z))
    stop ("arguments do not have compatible dimensions")
  if (!is.null(.fun))
    warning (".fun is not changeable for a dedicated basis type")
  B <- basis(x, ...)
  ## The S4 constructor will automatically recast Matrix::dMatrix
  ## type objects here (or similar)
  SmoothLag(Z %*% B@C0, random = Z %*% B@K1,
            basis = B,
            signature = deparse(sys.call())
            )
}


